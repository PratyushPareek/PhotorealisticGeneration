{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install transformers diffusers\n!pip install git+https://github.com/sberbank-ai/Real-ESRGAN.git","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:08:55.637676Z","iopub.execute_input":"2024-07-13T16:08:55.638022Z","iopub.status.idle":"2024-07-13T16:09:23.338798Z","shell.execute_reply.started":"2024-07-13T16:08:55.637995Z","shell.execute_reply":"2024-07-13T16:09:23.337713Z"},"trusted":true},"execution_count":59,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.42.3)\nRequirement already satisfied: diffusers in /opt/conda/lib/python3.10/site-packages (0.29.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.13.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.23.4)\nRequirement already satisfied: numpy<2.0,>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.1)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2023.12.25)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.3)\nRequirement already satisfied: tokenizers<0.20,>=0.19 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.19.1)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\nRequirement already satisfied: importlib-metadata in /opt/conda/lib/python3.10/site-packages (from diffusers) (6.11.0)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from diffusers) (9.5.0)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.5.0)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.1)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata->diffusers) (3.17.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.7.4)\nCollecting git+https://github.com/sberbank-ai/Real-ESRGAN.git\n  Cloning https://github.com/sberbank-ai/Real-ESRGAN.git to /tmp/pip-req-build-w2iat_h0\n  Running command git clone --filter=blob:none --quiet https://github.com/sberbank-ai/Real-ESRGAN.git /tmp/pip-req-build-w2iat_h0\n  Resolved https://github.com/sberbank-ai/Real-ESRGAN.git to commit 362a0316878f41dbdfbb23657b450c3353de5acf\n  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from RealESRGAN==1.0) (1.26.4)\nRequirement already satisfied: opencv-python in /opt/conda/lib/python3.10/site-packages (from RealESRGAN==1.0) (4.10.0.84)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from RealESRGAN==1.0) (9.5.0)\nRequirement already satisfied: torch>=1.7 in /opt/conda/lib/python3.10/site-packages (from RealESRGAN==1.0) (2.1.2)\nRequirement already satisfied: torchvision>=0.8.0 in /opt/conda/lib/python3.10/site-packages (from RealESRGAN==1.0) (0.16.2)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from RealESRGAN==1.0) (4.66.4)\nRequirement already satisfied: huggingface-hub in /opt/conda/lib/python3.10/site-packages (from RealESRGAN==1.0) (0.23.4)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.7->RealESRGAN==1.0) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.7->RealESRGAN==1.0) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.7->RealESRGAN==1.0) (1.13.0)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.7->RealESRGAN==1.0) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.7->RealESRGAN==1.0) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.7->RealESRGAN==1.0) (2024.5.0)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from torchvision>=0.8.0->RealESRGAN==1.0) (2.32.3)\nRequirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub->RealESRGAN==1.0) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub->RealESRGAN==1.0) (6.0.1)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.9->huggingface-hub->RealESRGAN==1.0) (3.1.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.7->RealESRGAN==1.0) (2.1.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.8.0->RealESRGAN==1.0) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.8.0->RealESRGAN==1.0) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.8.0->RealESRGAN==1.0) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->torchvision>=0.8.0->RealESRGAN==1.0) (2024.7.4)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.7->RealESRGAN==1.0) (1.3.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nfrom PIL import Image\nfrom torchvision.transforms import ToPILImage, ToTensor\nfrom RealESRGAN import RealESRGAN\nfrom transformers import pipeline\nfrom diffusers import StableDiffusionPipeline\nimport os\nimport json\nfrom datetime import datetime\nfrom tqdm.auto import tqdm\nimport shutil\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:09:23.340826Z","iopub.execute_input":"2024-07-13T16:09:23.341152Z","iopub.status.idle":"2024-07-13T16:09:23.347609Z","shell.execute_reply.started":"2024-07-13T16:09:23.341123Z","shell.execute_reply":"2024-07-13T16:09:23.346724Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"device = 'cuda' if torch.cuda.is_available() else 'cpu'","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:09:23.348959Z","iopub.execute_input":"2024-07-13T16:09:23.349211Z","iopub.status.idle":"2024-07-13T16:09:23.360015Z","shell.execute_reply.started":"2024-07-13T16:09:23.349190Z","shell.execute_reply":"2024-07-13T16:09:23.359230Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"#The models used for text_to_img\ntext_to_img_model_names = [\n    \"CompVis/stable-diffusion-v1-4\",\n    \"dreamlike-art/dreamlike-photoreal-2.0\",\n    \"runwayml/stable-diffusion-v1-5\"\n]\n\n#Model for super-resolution\nsuper_resolution_model = RealESRGAN(device, scale=4)\nsuper_resolution_model.load_weights('weights/RealESRGAN_x4.pth', download=True)\noutput_size = 2048\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:09:23.361901Z","iopub.execute_input":"2024-07-13T16:09:23.362196Z","iopub.status.idle":"2024-07-13T16:09:23.924396Z","shell.execute_reply.started":"2024-07-13T16:09:23.362162Z","shell.execute_reply":"2024-07-13T16:09:23.923593Z"},"trusted":true},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"subjects = [\n    \"an old man\",\n    \"a teenage girl\",\n    \"a young man\"\n]\n\nactions = [\n    \"standing\"\n]\n\nbackgrounds = [\n    \"in a forest\",\n    \"on a beach\",\n    \"in Paris\"\n]\n\nguidance_scales = [\n    7,\n    8.5\n]\n\nnegative_keywords = [\"disfigured\", \"poorly drawn face\", \"ugly\", \"missing limbs\", \"bad anatomy\"]\npositive_keywords = [\"clear face\",\"Realistic\",\"two eyes\",\"clear hands\"]\n\nprompts = []\nfor subject in subjects:\n    for action in actions:\n        for background in backgrounds:\n            prompt = f\"Photorealistic photo of {subject}, full body, {action} {background}, {' '.join(positive_keywords)}\"\n            prompts.append(prompt)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:09:23.925531Z","iopub.execute_input":"2024-07-13T16:09:23.925823Z","iopub.status.idle":"2024-07-13T16:09:23.932364Z","shell.execute_reply.started":"2024-07-13T16:09:23.925800Z","shell.execute_reply":"2024-07-13T16:09:23.931589Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"class PhotorealisticImageGenerator:\n    def __init__(self, text_to_img_model, realsrgan_model, guidance_scale):\n        self.text_to_img_model = text_to_img_model\n        self.realsrgan_model = realsrgan_model\n        self.guidance_scale = guidance_scale\n\n    def generate_image(self, text_prompt):\n        # Generate initial image from text prompt\n        initial_image = self.text_to_img_model(prompt = text_prompt, negative_prompt = ' '.join(negative_keywords), guidance_scale = self.guidance_scale).images[0]\n        return initial_image\n\n    def upscale_image(self, image):\n        # Upscale the image to 2048 x 2048\n        high_res_image = self.realsrgan_model.predict(image, )\n        high_res_image = high_res_image.resize((output_size,output_size), Image.LANCZOS)\n        return high_res_image\n\n    def generate_and_upscale(self, text_prompt):\n        initial_image = self.generate_image(text_prompt)\n        upscaled_image = self.upscale_image(initial_image)\n        return upscaled_image","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:09:23.933303Z","iopub.execute_input":"2024-07-13T16:09:23.933577Z","iopub.status.idle":"2024-07-13T16:09:23.953250Z","shell.execute_reply.started":"2024-07-13T16:09:23.933551Z","shell.execute_reply":"2024-07-13T16:09:23.952569Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"class ImageGenerationAutomator:\n    \n    def __init__(self, image_models, super_res_model, prompts, output_dir):\n        self.image_models = image_models\n        self.super_res_model = super_res_model\n        self.prompts = prompts\n        self.output_dir = output_dir\n        self.log = {}\n        if not os.path.exists(output_dir):\n            os.makedirs(output_dir)\n        \n    def getImageGenerator(self, model_name, gs):\n        print(f'Initializing {model_name}')\n        model = StableDiffusionPipeline.from_pretrained(model_name, torch_dtype=torch.float16)\n        model = model.to(device)\n        image_generator = PhotorealisticImageGenerator(model, super_resolution_model,gs)\n        print(f'Initialized {model_name}')\n        return image_generator\n    \n    def automate_image_generation(self):\n        for model_name in tqdm(self.image_models):\n            for gs in guidance_scales:\n                image_generator = self.getImageGenerator(model_name,gs)\n                for n, prompt in enumerate(self.prompts):\n                    attempt_id = f\"{model_name.split('/')[-1]}_{gs}_{n}\"\n                    image_path = os.path.join(self.output_dir, f\"{attempt_id}.png\")\n\n                    try:\n                        image = image_generator.generate_and_upscale(prompt)\n                        image.save(image_path)\n\n                        self.log[attempt_id] = {\n                            \"prompt\": prompt,\n                            \"image_path\": image_path,\n                            \"status\": \"success\"\n                        }\n                    except Exception as e:\n                        self.log[attempt_id] = {\n                            \"prompt\": prompt,\n                            \"error\": str(e),\n                            \"status\": \"failed\"\n                        }\n                    \n        with open(\"log.json\", 'w') as f:\n            json.dump(self.log, f, indent=4)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-13T16:09:23.954500Z","iopub.execute_input":"2024-07-13T16:09:23.955221Z","iopub.status.idle":"2024-07-13T16:09:23.966024Z","shell.execute_reply.started":"2024-07-13T16:09:23.955196Z","shell.execute_reply":"2024-07-13T16:09:23.965267Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"automater = ImageGenerationAutomator(text_to_img_model_names,super_resolution_model,prompts,\"generated_images\")\nautomater.automate_image_generation()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:09:23.967116Z","iopub.execute_input":"2024-07-13T16:09:23.967851Z","iopub.status.idle":"2024-07-13T16:27:37.032427Z","shell.execute_reply.started":"2024-07-13T16:09:23.967820Z","shell.execute_reply":"2024-07-13T16:27:37.031669Z"},"trusted":true},"execution_count":66,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/3 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"82ad7effa5ab4b12a8006d33a02a7c08"}},"metadata":{}},{"name":"stdout","text":"Initializing CompVis/stable-diffusion-v1-4\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading pipeline components...:   0%|          | 0/7 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0d5df703e2db49318c27002d852ed559"}},"metadata":{}},{"name":"stdout","text":"Initialized CompVis/stable-diffusion-v1-4\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"610c6156e17c4a5095fdba0a924cbd01"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"40c6e1fd81b844d79df0a1d86a5dba5b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"291a5eb8084c4475a31da03245d44b14"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"16c5230c13264f7da08d6353af32af3e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2234bc7a49744cbdb0eef1e8cf15ea16"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2dc94200a4cb4f36a54154d18451b9fc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ac4ed32f030c4fd1a57a53caa063a56c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ace395da32f84c72b4c00d232c1733ef"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"574bf71f8661447597412b73fcb8f519"}},"metadata":{}},{"name":"stdout","text":"Initializing CompVis/stable-diffusion-v1-4\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading pipeline components...:   0%|          | 0/7 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e7b351c326b24f0e942e6a9958353ce7"}},"metadata":{}},{"name":"stdout","text":"Initialized CompVis/stable-diffusion-v1-4\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3caa58c13f314b0aba2f4f8206417170"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ad3dd29633404d1ebc001590ee352094"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1f578e1ff3c5467882a466968622feee"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"24874b348b244f97a6080f8f60ac935e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fc415110c89a4a10a9d33ce4b948af13"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4bb2a9795f7b4c3b829639dd5fccaa50"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fac1c7de94034b938fd2f0b2db71bd0c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"92e32e8a693648239ff9ae584b612d80"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4502bbf95e624b598c0be365d52234b2"}},"metadata":{}},{"name":"stdout","text":"Initializing dreamlike-art/dreamlike-photoreal-2.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading pipeline components...:   0%|          | 0/5 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9a1abccbf1f94aef831f684efe82ac82"}},"metadata":{}},{"name":"stdout","text":"Initialized dreamlike-art/dreamlike-photoreal-2.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b136ea79485f4a13b796f3dcb61e0803"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d8474d0b225843a7a0aa626ac3ad8461"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f5ee21f81b774d52b8c6cfdfe83f7290"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"caf1c6a281f9444e845bed974d968e74"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fffdfc90941e42f7b71d48947afe0bef"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"65f6ef70bc094afd93f4b6541a2b1335"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"192179efcb3842599aa6bfe4102f564f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"49d889777ac8462186506c309c856bcd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"12965e14d93d485b897bad09dbce8906"}},"metadata":{}},{"name":"stdout","text":"Initializing dreamlike-art/dreamlike-photoreal-2.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading pipeline components...:   0%|          | 0/5 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"11ce9214c33c44c98d026470f6b8bb16"}},"metadata":{}},{"name":"stdout","text":"Initialized dreamlike-art/dreamlike-photoreal-2.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8ab71bf798d5400480ed5801861aa553"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"44e4c07ff0d0487bb49316c55b985fbf"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aa095e5e8da642b6bd4be6e7baf2a304"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9093fc7eaa8b488e8f0bd4c8f23a81a8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2479c9f47e894bfb97e80b6c935980f6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1b1a2d530d354831ab09bfa9d22d4cb0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ec2b974d2d954bb1946cecd2bccc60f1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f0928e45c7bf4306b375cc86b1b300ae"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0da8ed0f828a44fdaf4dabc1744dee14"}},"metadata":{}},{"name":"stdout","text":"Initializing runwayml/stable-diffusion-v1-5\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading pipeline components...:   0%|          | 0/7 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"80ee656b90074c9197f667a75b0ed70b"}},"metadata":{}},{"name":"stdout","text":"Initialized runwayml/stable-diffusion-v1-5\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9b53b8972296402f8d82895b5f9ec135"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2e68ce08f2844c168e66ba6d974d94e1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"02a77030172f47e98b14ecd273a3e0f3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"943e858ceb2e4ded93096d79a05c949d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aa33df726c2f4353ac14959195022d1e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"14600bbd2ba643418eec48d62b33cbf0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f0be4aa113ca431c93d503092a57bfcb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3019acdd8eb4413985c0a4af08fa7f7e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c5647e9505c44cc4b5f844d3032c2dbb"}},"metadata":{}},{"name":"stdout","text":"Initializing runwayml/stable-diffusion-v1-5\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading pipeline components...:   0%|          | 0/7 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"128ad05b43d14d2587f0a1852d18bd9c"}},"metadata":{}},{"name":"stdout","text":"Initialized runwayml/stable-diffusion-v1-5\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2c4713bca1184814a0b323baa8785f70"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2796c68d4b654b5ebb70f989266072f2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"40831d049e73487880e9348dc47f49b2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7ddc709534694c8f80e87cec7213fbac"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dc5fb8e8057e4919af949f5bf3397304"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a4a4ce5679fa4d389aa061ef6b0ab9a0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e16667e749a6434588afad61e4ed5332"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2adcaec446624f16b953536898bdc29a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bc280b888b854bcfaea839a96cabbc3c"}},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}